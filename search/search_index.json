{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Function Documentation","text":"<p>This website contains documentaions for each example function we wrote a test for.</p> <p>Functions that are considered here are <code>my_adder</code>, <code>my_thermo_stat</code>, <code>have_digits</code>, <code>area_of_rectangle</code>, and <code>perimeter_of_rectangle</code>. For each function, a tutorial, a how-to-guide, a reference, and a explanation is provided.</p>"},{"location":"area_of_rectangle_explanation/","title":"Explanation: Calculating the Area of a Rectangle with <code>area_of_rectangle</code>","text":"<p>What Does the <code>area_of_rectangle</code> Function Do? This function calculates the area of a rectangle by multiplying its width and length. This is a straightforward application of the formula for the area of a rectangle: Area = Width \u00d7 Length. The function is a basic example of how to create and use mathematical operations within a Python function.</p> <p>We have two edge cases for this function: - Zero Values: If either width or length is zero, the area will be zero. - Negative Values: In most real-world scenarios, negative values for width or length don\u2019t make sense. If passed, the function will still return a result, but it will be negative.</p> <p>Why Would You Use the <code>area_of_rectangle</code> Function? While adding three numbers seems trivial, this function has practical utility for:</p> <ul> <li>Code reuse: You avoid having to write the addition operation manually each time you need it.</li> <li>Scalability: In larger projects or programs, functions like this can serve as building blocks for more complex operations.</li> <li>Modularity: It encourages a clean separation of logic. Instead of having arithmetic operations scattered throughout your code, you can centralize the logic in a reusable function.</li> </ul>"},{"location":"area_of_rectangle_how_to_guide/","title":"How-to Guide: Calculating the Area of a Square Using","text":""},{"location":"area_of_rectangle_how_to_guide/#objective","title":"Objective","text":"<p>In this guide, you will learn how to use the <code>area_of_rectangle</code> function to calculate the area of a square, where the width and length are equal.</p>"},{"location":"area_of_rectangle_how_to_guide/#code-example","title":"Code Example","text":"<pre><code>width = length = 8\narea = area_of_rectangle(width, length)\nprint(f'The area of the square is {area}')\n</code></pre>"},{"location":"area_of_rectangle_ref/","title":"Reference: Area of a rectangle with <code>area_of_rectangle</code>","text":""},{"location":"area_of_rectangle_ref/#function-signiture","title":"Function signiture","text":"<pre><code>def area_of_rectangle(width: float, length: float) -&gt; float:\n</code></pre>"},{"location":"area_of_rectangle_ref/#description","title":"Description","text":"<p>The <code>area_of_rectangle</code> function calculates the area of a rectangle by multiplying its width and length.</p>"},{"location":"area_of_rectangle_ref/#parameters","title":"Parameters","text":"<ul> <li><code>width (float)</code>: The width of the rectangle.</li> <li><code>length (float)</code>: The length of the rectangle.</li> </ul>"},{"location":"area_of_rectangle_ref/#return","title":"Return","text":"<ul> <li><code>area (float)</code>: The calculated area, which is the product of the width and length.</li> </ul>"},{"location":"area_of_rectangle_tutorial/","title":"Tutorial: Calculating the Area of a Rectangle Using <code>area_of_rectangle</code>","text":""},{"location":"area_of_rectangle_tutorial/#objective","title":"Objective","text":"<p>In this tutorial, you will learn how to use the <code>area_of_rectangle</code> function to calculate the area of a rectangle given its width and length.</p>"},{"location":"area_of_rectangle_tutorial/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"area_of_rectangle_tutorial/#step-1-define-the-width-and-length","title":"Step 1: Define the width and length","text":"<pre><code>width = 5\nlength = 10\n</code></pre>"},{"location":"area_of_rectangle_tutorial/#step-2-call-the-area_of_rectangle-function","title":"Step 2: Call the <code>area_of_rectangle</code> function","text":"<pre><code>area = area_of_rectangle(width, length)\n</code></pre>"},{"location":"area_of_rectangle_tutorial/#step-3-print-the-result","title":"Step 3: Print the result","text":"<pre><code>print(f'The area of the rectangle is {area}')\n</code></pre>"},{"location":"have_digits_explanation/","title":"Explanation: Determining the Number of Digits Using <code>have_digits</code>","text":"<p>The have_digits function demonstrates a simple algorithm for checking if a string contains any digits. It loops through each character in the string and uses the <code>isdigit()</code> method to determine whether a character is a digit. As soon as the function finds a digit, it sets the output (out) to 1 and uses the break statement to exit the loop. This optimization prevents unnecessary checks once a digit is found.</p>"},{"location":"have_digits_how_to_guide/","title":"How-to Guide: Determining the Number of Digits in a String","text":""},{"location":"have_digits_how_to_guide/#objective","title":"Objective:","text":"<p>In this guide, we will review two cases for a string: containing and not containing a digit.</p>"},{"location":"have_digits_how_to_guide/#no-digit-case","title":"No Digit Case","text":"<pre><code>s = \"HelloWorld\"\nhas_digit = have_digits(s)\nif has_digit:\n    print(\"The string contains digits.\")\nelse:\n    print(\"The string does not contain digits.\")\n</code></pre>"},{"location":"have_digits_how_to_guide/#digit-case","title":"Digit Case","text":"<pre><code>s = \"Hello123\"\nhas_digit = have_digits(s)\nif has_digit:\n    print(\"The string contains digits.\")\nelse:\n    print(\"The string does not contain digits.\")\n</code></pre>"},{"location":"have_digits_ref/","title":"Reference: Number of Digits by <code>my_have_digits</code>","text":""},{"location":"have_digits_ref/#function-signiture","title":"Function signiture","text":"<pre><code>def have_digits(s: str) -&gt; int:\n</code></pre>"},{"location":"have_digits_ref/#description","title":"Description","text":"<p>The <code>have_digits</code> function checks whether a given string contains any digit characters. It returns 1 if the string contains digits and 0 if it does not.</p>"},{"location":"have_digits_ref/#parameters","title":"Parameters","text":"<ul> <li><code>s (str)</code>: The input string to check.</li> </ul>"},{"location":"have_digits_ref/#returns","title":"Returns","text":"<ul> <li><code>s (str)</code>: The input string to check.</li> </ul>"},{"location":"have_digits_tutorial/","title":"Tutorial: Checking for Digits in a String Using <code>have_digits</code>","text":""},{"location":"have_digits_tutorial/#objective","title":"Objective","text":"<p>In this tutorial, you will learn how to use the <code>have_digits</code> function to check whether a string contains any digits.</p>"},{"location":"have_digits_tutorial/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"have_digits_tutorial/#step-1-define-a-string","title":"Step 1: Define a string","text":"<pre><code>s = \"Hello123\"\n</code></pre>"},{"location":"have_digits_tutorial/#step-2-call-the-have_digits-function","title":"Step 2: Call the <code>have_digits</code> function","text":"<pre><code>has_digit = have_digits(s)\n</code></pre>"},{"location":"have_digits_tutorial/#step-3-print-the-results","title":"Step 3: Print the results","text":"<pre><code>if has_digit:\n    print(\"The string contains digits.\")\nelse:\n    print(\"The string does not contain digits.\")\n</code></pre>"},{"location":"my_adder_explanation/","title":"Explanation: Adding Three Numbers Using <code>my_adder</code>","text":"<p>What Does the <code>my_adder</code> Function Do?</p> <p>The my_adder function performs a simple task: it takes three numerical values and returns their sum.</p> <ul> <li>Input: Three numbers are passed to the function as arguments (<code>a</code>, <code>b</code>, and <code>c</code>).</li> <li>Processing: The function uses the <code>+</code> operator to add these numbers.</li> <li>Output: The function returns the sum of the numbers as a single value. This function helps in automating repetitive tasks like adding numbers, a common need in many mathematical and data analysis problems.</li> </ul> <p>Why Would You Use the <code>my_adder</code> Function?</p> <p>While adding three numbers seems trivial, this function has practical utility for:</p> <ul> <li>Code reuse: You avoid having to write the addition operation manually each time you need it.</li> <li>Scalability: In larger projects or programs, functions like this can serve as building blocks for more complex operations.</li> <li>Modularity: It encourages a clean separation of logic. Instead of having arithmetic operations scattered throughout your code, you can centralize the logic in a reusable function.</li> </ul>"},{"location":"my_adder_how_to_guide/","title":"How-to Guide: Adding Three Numbers Using <code>my_adder</code>","text":"<p>In this very concise how-to guide, I would like to emphasize on the fact that this function, <code>my_adder</code>, is compatible with integers, floats, negative, zero, and their combination as inputs.</p> <p>Therefore, you can go ahead and set the parameters <code>a</code>, <code>b</code>, and <code>c</code> to any of the above combinations and see the results. See the tutorial of this function for a sample example.</p>"},{"location":"my_adder_ref/","title":"Reference: Adding Three Numbers Using <code>my_adder</code>","text":""},{"location":"my_adder_ref/#function-signiture","title":"Function signiture","text":"<pre><code>def my_adder(a: float, b: float, c: float) -&gt; float:\n</code></pre>"},{"location":"my_adder_ref/#description","title":"Description","text":"<p>The <code>my_adder</code> function takes three numerical inputs and returns their sum. It is a simple utility function for adding numbers, supporting both integers and floating-point numbers.</p>"},{"location":"my_adder_ref/#parameters","title":"Parameters","text":"<ul> <li><code>a</code> (<code>int</code> or <code>float</code>): The first number to add.</li> <li><code>b</code> (<code>int</code> or <code>float</code>): The second number to add.</li> <li><code>c</code> (<code>int</code> or <code>float</code>): The third number to add.</li> </ul>"},{"location":"my_adder_ref/#returns","title":"Returns","text":"<ul> <li>out (<code>float</code>): The sum of the three input numbers.</li> </ul>"},{"location":"my_adder_tutorial/","title":"Tutorial: Adding Three Numbers Using <code>my_adder</code>","text":""},{"location":"my_adder_tutorial/#objective","title":"Objective","text":"<p>In this tutorial, you will learn how to use the <code>my_adder</code> function to add three numbers and return the result.</p>"},{"location":"my_adder_tutorial/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"my_adder_tutorial/#step-1-define-the-numbers-you-want-to-add","title":"Step 1: Define the numbers you want to add","text":"<p>Start by deciding on three numbers. These numbers can be any valid numerical values in Python (integers, floats, etc.). For this example, let\u2019s choose <code>a = 5.5</code>, <code>b = 10.1</code>, and <code>c = 15.9</code>.</p> <pre><code>a = 5.5\nb = 10.1\nc = 15.9\n</code></pre>"},{"location":"my_adder_tutorial/#step-2-call-the-my_adder-function","title":"Step 2: Call the <code>my_adder</code> function","text":"<p>Next, you will pass the three numbers you defined to the <code>my_adder</code> function. The function will return the sum of these numbers.</p> <pre><code>result = my_adder(a, b, c)\n</code></pre>"},{"location":"my_adder_tutorial/#step-3-print-the-results","title":"Step 3: Print the results","text":"<p>Finally, display the result of the addition to the console using the <code>print()</code> function.</p> <pre><code>print(f'The sum of {a}, {b}, and {c} is {result}')\n</code></pre>"},{"location":"my_thermo_stat_explanation/","title":"Explanation: Determining the Status of <code>my_thermo_stat</code>","text":"<p>What Does the <code>my_thermo_stat</code> Function Do?</p> <p>This function is a simple temperature control algorithm that mimics how a real thermostat might perform. It uses conditional <code>if-elif-else</code> logic to determine whether to activate the heat, air conditioning (ac), or turn off based on the difference between the current temperature and the desired temperature. </p> <p>A 5-degree threshold is used to prevent the thermostat from constantly switching between heat and AC when the temperature is close to the desired value.</p> <p>In the edge case, if the temperature is exactly 5 degrees higher or lower, the function will still activate the heat or AC.</p> <p>Why Would You Use the <code>my_thermo_stat</code> Function?</p> <p>In a real thermostat system, the thresholds might be adjustable, and more sophisticated algorithms could involve sensor feedback, variable heat/AC modes, and adaptive logic based on previous usage patterns. The <code>my_thermo_stat</code> function is a simplified version of this process, demonstrating core concepts of decision making based on temperature differences.</p>"},{"location":"my_thermo_stat_how_to_guide/","title":"How-to Guide: Switching the Thermostat to Different Modes","text":""},{"location":"my_thermo_stat_how_to_guide/#objective","title":"Objective:","text":"<p>In this guide, we will review three different statuses of this thermostat.</p>"},{"location":"my_thermo_stat_how_to_guide/#ac-mode","title":"AC Mode:","text":"<pre><code>temp = 80\ndesired_temp = 70\nstatus = my_thermo_stat(temp, desired_temp)\nprint(f'The thermostat status is: {status}')\n</code></pre>"},{"location":"my_thermo_stat_how_to_guide/#heat-mode","title":"Heat Mode:","text":"<pre><code>temp = 70\ndesired_temp = 80\nstatus = my_thermo_stat(temp, desired_temp)\nprint(f'The thermostat status is: {status}')\n</code></pre>"},{"location":"my_thermo_stat_how_to_guide/#off-mode","title":"Off Mode:","text":"<pre><code>temp = 77\ndesired_temp = 80\nstatus = my_thermo_stat(temp, desired_temp)\nprint(f'The thermostat status is: {status}')\n</code></pre>"},{"location":"my_thermo_stat_ref/","title":"Reference: Thermostat Status with <code>my_thermo_stat</code>","text":""},{"location":"my_thermo_stat_ref/#function-signiture","title":"Function signiture","text":"<pre><code>def my_thermo_stat(temp: int, desired_temp: int) -&gt; str:\n</code></pre>"},{"location":"my_thermo_stat_ref/#description","title":"Description:","text":"<p>The <code>my_thermo_stat</code> function takes the current temperature and desired temperature as inputs and returns the status of the thermostat as a string. The function determines whether the thermostat should turn on the heat, activate the air conditioning, or remain off based on the difference between the two temperatures.</p>"},{"location":"my_thermo_stat_ref/#parameters","title":"Parameters:","text":"<ul> <li><code>temp (int)</code>: The current temperature.</li> <li><code>desired_temp (int)</code>: The desired temperature to reach.</li> </ul>"},{"location":"my_thermo_stat_ref/#returns","title":"Returns:","text":"<ul> <li>status (str): The status of the thermostat, which can be one of the following:<ul> <li>\"Heat\": If the current temperature is more than 5 degrees lower than the desired temperature.</li> <li>\"AC\": If the current temperature is more than 5 degrees higher than the desired temperature.</li> <li>\"off\": If the current temperature is within 5 degrees of the desired temperature.</li> </ul> </li> </ul>"},{"location":"my_thermo_stat_tutorial/","title":"Tutorial: Adjusting the Thermostat Settings with <code>my_thermo_stat</code>","text":""},{"location":"my_thermo_stat_tutorial/#objective","title":"Objective","text":"<p>In this tutorial, you will learn how to use the <code>my_thermo_stat</code> function to automatically change the thermostat status based on the current temperature and the desired temperature.</p>"},{"location":"my_thermo_stat_tutorial/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"my_thermo_stat_tutorial/#step-1-define-the-current-and-desired-temperatures","title":"Step 1: Define the current and desired temperatures","text":"<pre><code>temp = 60\ndesired_temp = 70\n</code></pre>"},{"location":"my_thermo_stat_tutorial/#step-2-call-the-my_thermo_stat-function","title":"Step 2: Call the <code>my_thermo_stat</code> function","text":"<pre><code>status = my_thermo_stat(temp, desired_temp)\n</code></pre>"},{"location":"my_thermo_stat_tutorial/#step-3-print-the-results","title":"Step 3: Print the results","text":"<pre><code>print(f'The thermostat status is: {status}')\n</code></pre>"},{"location":"perimeter_of_rectangle_explanation/","title":"Explanation: Calculating the Perimeter of a Rectangle with <code>perimeter_of_rectangle</code>","text":"<p>What Does the <code>perimeter_of_rectangle</code> Function Do? This function calculates the perimeter of a rectangle by summing over its widths and lengths. This is a straightforward application of the formula for the area of a rectangle: Area = 2 \u00d7 (Width + Length). The function is a basic example of how to create and use mathematical operations within a Python function.</p> <p>We have two edge cases for this function: - Zero Values: If either of the dimensions are zero, it does not make geometrical sense. - Negative Values: In most real-world scenarios, negative values for width or length don\u2019t make sense. If passed, the function will still return a result.</p> <p>Why Would You Use the <code>area_of_rectangle</code> Function? While adding three numbers seems trivial, this function has practical utility for:</p> <ul> <li>Code reuse: You avoid having to write the addition operation manually each time you need it.</li> <li>Scalability: In larger projects or programs, functions like this can serve as building blocks for more complex operations.</li> <li>Modularity: It encourages a clean separation of logic. Instead of having arithmetic operations scattered throughout your code, you can centralize the logic in a reusable function.</li> </ul>"},{"location":"perimeter_of_rectangle_how_to_guide/","title":"How-to Guide: Calculating the Perimenter of a Square Using","text":""},{"location":"perimeter_of_rectangle_how_to_guide/#objective","title":"Objective","text":"<p>In this guide, you will learn how to use the <code>perimeter_of_rectangle</code> function to calculate the area of a square, where the width and length are equal.</p>"},{"location":"perimeter_of_rectangle_how_to_guide/#code-example","title":"Code Example","text":"<pre><code>width = length = 8\nperimeter = perimeter_of_rectangle(width, length)\nprint(f'The perimeter of the square is {perimeter}')\n</code></pre>"},{"location":"perimeter_of_rectangle_ref/","title":"Reference: Perimeter of a rectangle with <code>perimeter_of_rectangle</code>","text":""},{"location":"perimeter_of_rectangle_ref/#function-signiture","title":"Function signiture","text":"<pre><code>def perimeter_of_rectangle(width: float, length: float) -&gt; float:\n</code></pre>"},{"location":"perimeter_of_rectangle_ref/#description","title":"Description","text":"<p>The <code>perimeter_of_rectangle</code> function calculates the perimeter of a rectangle by summing its widths and lengths.</p>"},{"location":"perimeter_of_rectangle_ref/#parameters","title":"Parameters","text":"<ul> <li><code>width (float)</code>: The width of the rectangle.</li> <li><code>length (float)</code>: The length of the rectangle.</li> </ul>"},{"location":"perimeter_of_rectangle_ref/#return","title":"Return","text":"<ul> <li><code>perimeter (float)</code>: The calculated perimeter, which is the summation of the widths and lengths.</li> </ul>"},{"location":"perimeter_of_rectangle_tutorial/","title":"Tutorial: Calculating the Perimeter of a Rectangle Using <code>perimeter_of_rectangle</code>","text":""},{"location":"perimeter_of_rectangle_tutorial/#objective","title":"Objective","text":"<p>In this tutorial, you will learn how to use the <code>perimeter_of_rectangle</code> function to calculate the area of a rectangle given its width and length.</p>"},{"location":"perimeter_of_rectangle_tutorial/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"perimeter_of_rectangle_tutorial/#step-1-define-the-width-and-length","title":"Step 1: Define the width and length","text":"<pre><code>width = 5\nlength = 10\n</code></pre>"},{"location":"perimeter_of_rectangle_tutorial/#step-2-call-the-perimeter_of_rectangle-function","title":"Step 2: Call the <code>perimeter_of_rectangle</code> function","text":"<pre><code>perimeter = perimeter_of_rectangle(width, length)\n</code></pre>"},{"location":"perimeter_of_rectangle_tutorial/#step-3-print-the-result","title":"Step 3: Print the result","text":"<pre><code>print(f'The perimeter of the rectangle is {perimeter}')\n</code></pre>"}]}